#ifdef _WIN32
#include <windows.h>
#endif

#include "library.h"
#include "user.h"
#include <iostream>

void clearConsole() {
#ifdef _WIN32
  system("cls");
#else
  system("clear");
#endif
}

int main() {
#ifdef _WIN32
  SetConsoleOutputCP(CP_UTF8);
  SetConsoleCP(CP_UTF8);
#endif

  Library lib("books.txt");

  while (true) {
    std::string studentID, password;
    User *user = nullptr;

    while (true) {
      clearConsole();
      std::cout << "1. Login\n2. Register\n0. Exit\nChoice: ";

      int opt;
      std::cin >> opt;
      std::cin.ignore();

      if (opt == 0)
        return 0;

      std::cout << "Enter your student ID (8 digits): ";
      std::getline(std::cin, studentID);

      if (!User::isValidId(studentID)) {
        std::cout << "Invalid student ID format. Must be 8 digits.\n";
        std::cout << "Press Enter to continue...";
        std::cin.get();
        continue;
      }

      std::cout << "Enter your password: ";
      std::getline(std::cin, password);

      if (opt == 2) {
        if (User::registerUser(studentID, password)) {
          std::cout << "Registration successful! Please login.\n";
          std::cout << "Press Enter to continue...";
          std::cin.get();
        }
      } else if (opt == 1) {
        if (User::authenticate(studentID, password)) {
          std::cout << "Login successful.\n";
          user = new User(studentID);
          break;
        } else {
          std::cout << "Invalid student ID or password. Try again.\n";
          std::cout << "Press Enter to continue...";
          std::cin.get();
        }
      }
    }

    lib.load();

    int choice;
    do {
      clearConsole();
      std::cout << "Welcome, " << user->getId() << "!\n";
      std::cout << "\n1. List books"
                   "\n2. Add book"
                   "\n3. Borrow book"
                   "\n4. Return book"
                   "\n5. View my history"
                   "\n6. Search books"
                   "\n7. Logout"
                   "\n0. Exit\nChoice: ";
      std::cin >> choice;
      std::cin.ignore();
      clearConsole();

      if (choice == 1) {
        lib.listBooks();
        std::cout << "Press Enter to continue...";
        std::cin.get();
      } else if (choice == 2) {
        int id = lib.getNextBookId();
        std::cout << "Book ID will be autogenerated: " << id << std::endl;

        std::string title, author, publish_date;

        std::cout << "Enter title: ";
        std::getline(std::cin, title);

        std::cout << "Enter author: ";
        std::getline(std::cin, author);

        std::cout << "Enter publish date (YYYY-MM-DD): ";
        std::getline(std::cin, publish_date);

        lib.addBook(Book(id, title, author, publish_date));
        lib.save();

        std::cout << "Book added!\nPress Enter to continue...";
        std::cin.get();
      } else if (choice == 3) {
        int id;
        std::cout << "Enter book id to borrow: ";
        std::cin >> id;
        std::cin.ignore();

        Book book;
        if (lib.borrowBook(id, book)) {
          std::cout << "Borrowed.\n";
          user->recordHistory("Borrowed", book);
          lib.save();
        } else {
          std::cout << "Not available.\n";
        }
        std::cout << "Press Enter to continue...";
        std::cin.get();
      } else if (choice == 4) {
        int id;
        std::cout << "Enter book id to return: ";
        std::cin >> id;
        std::cin.ignore();

        Book book;

        if (lib.returnBook(id, book)) {
          std::cout << "Returned.\n";
          user->recordHistory("Returned", book);
          lib.save();
        } else {
          std::cout << "Invalid id or already available.\n";
        }
        std::cout << "Press Enter to continue...";
        std::cin.get();

      } else if (choice == 5) {
        user->showHistory();
        std::cout << "Press Enter to continue...";
        std::cin.get();
      } else if (choice == 6) {
        std::string keyword;
        std::cout << "Enter title or author to search: ";
        std::getline(std::cin, keyword);

        lib.searchBooks(keyword);
        std::cout << "Press Enter to continue...";
        std::cin.get();
      } else if (choice == 7) {
        std::cout << "Logging out...\n";
        delete user;
        user = nullptr;

        std::cout << "Press Enter to continue...";
        std::cin.get();
        break;
      }
    } while (choice != 0);

    if (choice == 0) {
      if (user)
        delete user;
      break;
    }
  }

  return 0;
}